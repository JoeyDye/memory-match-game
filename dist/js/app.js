"use strict";var deck=document.querySelector(".deck"),cards=deck.children,rating=document.querySelector(".score__stars"),stars=rating.children,moves=document.querySelector(".score__moves"),modal=document.querySelector(".modal-body"),timer=document.querySelector("#timer"),reset=document.querySelector(".score__restart"),playAgain=document.querySelector(".play-again"),win=!1,time=void 0,isTimerOn=!1,timerVar=void 0,totalSeconds=0,star=void 0,starCount=3,score=0,moveCount=0,clicked=void 0,newCards=[],firstCard=void 0,firstCardClass=void 0,secondCard=void 0,secondCardClass=void 0,startTimer=function(){timerVar=setInterval(countTimer,1e3)},countTimer=function(){++totalSeconds;var r=Math.floor(totalSeconds/60),e=totalSeconds-60*r;r<10&&(r="0"+r),e<10&&(e="0"+e),time=timer.innerHTML=r+":"+e},stopTimer=function(){clearInterval(timerVar)},shuffle=function(r){var e=0,t=0,a=null;for(e=r.length-1;0<e;e-=1)t=Math.floor(Math.random()*(e+1)),a=r[e],r[e]=r[t],r[t]=a},shuffleCards=function(){var r=!0,e=!1,t=void 0;try{for(var a,s=cards[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value.innerHTML;newCards.push(c)}}catch(r){e=!0,t=r}finally{try{!r&&s.return&&s.return()}finally{if(e)throw t}}shuffle(newCards);for(var n=0;n<16;n++)cards[n].innerHTML=newCards[n]},getTime=function(){return timer.innerText},resetGame=function(){newCards=[],shuffleCards();var r=!0,e=!1,t=void 0;try{for(var a,s=cards[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){a.value.classList.remove("deck__card--open","deck__card--show","deck__card--match")}}catch(r){e=!0,t=r}finally{try{!r&&s.return&&s.return()}finally{if(e)throw t}}moveCount=0,moves.innerText=moveCount,stopTimer();var c=!(isTimerOn=!1),n=!(timer.innerHTML="00:00"),o=void 0;try{for(var i,d=stars[Symbol.iterator]();!(c=(i=d.next()).done);c=!0){var l=i.value;l.removeChild(l.firstChild)}}catch(r){n=!0,o=r}finally{try{!c&&d.return&&d.return()}finally{if(n)throw o}}var m=!0,f=!1,u=void 0;try{for(var v,h=stars[Symbol.iterator]();!(m=(v=h.next()).done);m=!0){v.value.innerHTML='<i class="fas fa-star"></i>'}}catch(r){f=!0,u=r}finally{try{!m&&h.return&&h.return()}finally{if(f)throw u}}starCount=3,score=0,$("#success-modal").modal("hide"),clicked=!1},starRating=function(){switch(moveCount++,moves.innerText=moveCount){case 15:(star=stars[2].firstElementChild).remove(),stars[2].innerHTML='<i class="far fa-star"></i>',starCount--;break;case 20:(star=stars[1].firstElementChild).remove(),stars[1].innerHTML='<i class="far fa-star"></i>',starCount--}},showCard=function(r){r.classList.add("deck__card--open","deck__card--show")},correctMatch=function(r,e){r.classList.add("deck__card--match"),e.classList.add("deck__card--show","deck__card--match"),clicked=!1,7<++score&&(win=!0,stopTimer(),time=getTime(),modal.innerHTML="<p><strong>Time:</strong> "+time+"</p><p><strong>Stars:</strong> "+starCount+"</p><p><strong>Moves:</strong> "+moveCount+"</p>",$("#success-modal").modal("show"))},incorrectMatch=function(r,e){r.classList.add("deck__card--fail"),r.classList.remove("deck__card--open"),e.classList.add("deck__card--show","deck__card--fail"),setTimeout(function(){r.classList.remove("deck__card--fail","deck__card--show"),e.classList.remove("deck__card--fail","deck__card--show")},500),clicked=!1},cardMatch=function(r){isTimerOn||(totalSeconds=0,startTimer(),isTimerOn=!0),"LI"===r.target.nodeName&&!0===clicked&&!1===r.target.classList.contains("deck__card--match")&&!1===r.target.classList.contains("deck__card--show")?(secondCard=r.target,secondCardClass=secondCard.children[0].classList[1],firstCardClass===secondCardClass?correctMatch(firstCard,secondCard):incorrectMatch(firstCard,secondCard),!1===win&&starRating()):"LI"===r.target.nodeName&&!1===r.target.classList.contains("deck__card--match")&&(firstCard=r.target,firstCardClass=firstCard.children[0].classList[1],showCard(firstCard),clicked=!0)};shuffleCards(),deck.addEventListener("click",cardMatch),reset.addEventListener("click",resetGame),playAgain.addEventListener("click",resetGame);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
